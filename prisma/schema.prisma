// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuários do sistema
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(EMPLOYEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  sales         Sale[]
  purchaseOrders PurchaseOrder[]
  stockMovements StockMovement[]
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

// Categorias de produtos
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

// Fornecedores
model Supplier {
  id              String         @id @default(cuid())
  companyName     String
  contactName     String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  postalCode      String?
  taxId           String?        // CNPJ
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isActive        Boolean        @default(true)
  products        Product[]      // Produtos fornecidos por este fornecedor
  purchaseOrders  PurchaseOrder[]
}

// Produtos
model Product {
  id              String          @id @default(cuid())
  sku             String          @unique
  name            String
  description     String?
  categoryId      String
  category        Category        @relation(fields: [categoryId], references: [id])
  supplierId      String?
  supplier        Supplier?       @relation(fields: [supplierId], references: [id])
  purchasePrice   Decimal         @db.Decimal(10, 2)
  sellingPrice    Decimal         @db.Decimal(10, 2)
  currentStock    Int             @default(0)
  minimumStock    Int             @default(5)
  unit            String          @default("un") // unidade, metro, kg, etc.
  location        String?         // Localização no estoque (prateleira, corredor)
  barcode         String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  salesItems      SaleItem[]
  purchaseItems   PurchaseItem[]
  stockMovements  StockMovement[]
  priceHistory    PriceHistory[]

  @@index([categoryId])
  @@index([supplierId])
  @@index([sku])
  @@index([name])
}

// Clientes
model Customer {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  postalCode  String?
  taxId       String?   // CPF ou CNPJ
  type        CustomerType @default(PERSON)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  sales       Sale[]

  @@index([name])
  @@index([email])
}

enum CustomerType {
  PERSON      // Pessoa física
  COMPANY     // Pessoa jurídica
}

// Vendas
model Sale {
  id            String      @id @default(cuid())
  customerId    String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  saleDate      DateTime    @default(now())
  status        SaleStatus  @default(COMPLETED)
  totalAmount   Decimal     @db.Decimal(10, 2)
  discount      Decimal     @default(0) @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         SaleItem[]

  @@index([customerId])
  @@index([userId])
  @@index([saleDate])
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
  INVOICE
}

// Itens da venda
model SaleItem {
  id          String    @id @default(cuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
  discount    Decimal   @default(0) @db.Decimal(10, 2)
  total       Decimal   @db.Decimal(10, 2)

  @@index([saleId])
  @@index([productId])
}

// Pedidos de compra (para fornecedores)
model PurchaseOrder {
  id              String            @id @default(cuid())
  supplierId      String
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  orderDate       DateTime          @default(now())
  expectedDelivery DateTime?
  actualDelivery  DateTime?
  status          PurchaseStatus    @default(PENDING)
  totalAmount     Decimal           @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  items           PurchaseItem[]

  @@index([supplierId])
  @@index([userId])
  @@index([orderDate])
  @@index([status])
}

enum PurchaseStatus {
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  PARTIALLY_RECEIVED
  CANCELLED
}

// Itens do pedido de compra
model PurchaseItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  receivedQuantity Int          @default(0)
  unitPrice       Decimal       @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)

  @@index([purchaseOrderId])
  @@index([productId])
}

// Movimentações de estoque
model StockMovement {
  id          String        @id @default(cuid())
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  quantity    Int           // Positivo para entrada, negativo para saída
  type        MovementType
  reference   String?       // Referência para venda ou compra (ID)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  notes       String?
  createdAt   DateTime      @default(now())

  @@index([productId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum MovementType {
  PURCHASE        // Compra
  SALE            // Venda
  ADJUSTMENT      // Ajuste manual
  RETURN          // Devolução (cliente)
  RETURN_SUPPLIER // Devolução para fornecedor
  TRANSFER        // Transferência entre locais
  LOSS            // Perdas/Avarias
  INITIAL         // Inicialização do estoque
}

// Histórico de preços
model PriceHistory {
  id            String    @id @default(cuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  purchasePrice Decimal   @db.Decimal(10, 2)
  sellingPrice  Decimal   @db.Decimal(10, 2)
  effectiveDate DateTime  @default(now())
  notes         String?
  createdAt     DateTime  @default(now())

  @@index([productId])
  @@index([effectiveDate])
}
